use Test;
use Version::Semverish;

my @tests =
  "1.2",             "== 1.2                 ", "1.2               ",
  ">=1.0 <2.0",      ">= 1.0  < 2.0          ", "1.0    1.2.3  1.9 ",
  ">1 <2.0 || >=3.2 <4", "> 1  < 2.0  >= 3.2  < 4", "                  ",
;


plan @tests / 3;

for @tests -> $range, $list, $ok {
    subtest "$range -> $list" => {
        my $got      := Version::Semverish.as-generic-range($range);
        my $expected := $list.words.map(-> $c, $v {
            $c, Version::Semverish.new($v)
        }).flat.Slip;

        is-deeply $got, $expected, "did '$range' expand ok";

        my @vok = $ok.words.map({ Version::Semverish.new($_) });
        ok @vok.are(Version::Semverish), "all @vok.elems() versions are ok";

        for $expected -> $comparator, $version {
            is-deeply ([&&] @vok.map({ ."$comparator"($version) })), True,
              "did '$comparator $version' compare ok";
        }

        done-testing;
    }
}

# vim: expandtab shiftwidth=4
